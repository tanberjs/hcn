/* ========= Robust front-end logic for HCN ======== */

/* ---------- Loader init (robust, with fallback) ---------- */
(function initLoader(){
  const loader = document.getElementById('loader');
  if(!loader) return;
  loader.classList.remove('loader--hidden');
  let hidden=false;
  const FORCED_HIDE_MS = 6000;
  const tidy = () => {
    if(hidden) return;
    hidden=true;
    loader.classList.add('loader--hidden');
    loader.setAttribute('aria-hidden','true');
    setTimeout(()=>{ try{ loader.remove(); }catch(e){} }, 750);
  };
  if(document.readyState === 'complete'){ tidy(); return; }
  window.addEventListener('load', ()=> tidy(), {once:true});
  setTimeout(()=> tidy(), FORCED_HIDE_MS);
  // fail-safe: ESC hides loader for dev
  window.addEventListener('keydown', (e)=>{ if(e.key === 'Escape') tidy(); }, { once:true });
})();

/* ---------- Helper: $(id) ---------- */
const $ = id => document.getElementById(id);

/* ---------- Copy IP ---------- */
document.addEventListener('click', (e)=>{
  if(e.target && (e.target.id === 'copy-ip' || e.target.closest('#copy-ip'))){
    const ip = $('ip-box').textContent.trim();
    navigator.clipboard?.writeText(ip).then(()=> alert('IP copied: ' + ip)).catch(()=> alert('Copy failed. IP: ' + ip));
  }
});

/* ---------- Modal open/close ---------- */
const authModal = $('auth-modal');
const openAuthBtn = $('open-auth');
const closeAuthBtn = $('close-auth') || document.querySelector('.close');
openAuthBtn?.addEventListener('click', (ev)=>{
  ev.preventDefault();
  authModal.setAttribute('aria-hidden','false');
});
closeAuthBtn?.addEventListener('click', ()=> authModal.setAttribute('aria-hidden','true'));
window.addEventListener('click', (e)=> { if(e.target === authModal) authModal.setAttribute('aria-hidden','true'); });

/* ---------- Profile area toggling ---------- */
const authArea = $('auth-area');
const profilePanel = $('profile-panel');
function showProfilePanel(show){
  if(show){
    profilePanel.classList.add('active');
  } else {
    profilePanel.classList.remove('active');
  }
}

/* ---------- Firebase init (REPLACE with your config) ---------- */
/* IMPORTANT: Replace the fields below with your firebase config values */
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_PROJECT.firebaseapp.com",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_PROJECT.appspot.com",
  messagingSenderId: "YOUR_SENDER_ID",
  appId: "YOUR_APP_ID"
};
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();

/* ---------- Auth / registration logic ---------- */
const registerBtn = $('register-btn');
const loginBtn = $('login-btn');
const googleBtn = $('google-btn');

async function createUserDoc(uid, ign){
  try{
    await db.collection('users').doc(uid).set({
      ign: ign || '',
      credits: 0,
      createdAt: firebase.firestore.FieldValue.serverTimestamp()
    }, { merge: true });
  }catch(err){
    console.error('createUserDoc error', err);
  }
}

registerBtn?.addEventListener('click', async ()=>{
  const email = $('auth-email').value.trim();
  const password = $('auth-password').value;
  const ign = $('auth-ign').value.trim();
  if(!email || !password || !ign){ alert('Fill all fields'); return; }
  try{
    const res = await auth.createUserWithEmailAndPassword(email, password);
    await createUserDoc(res.user.uid, ign);
    alert('Registered! Welcome ' + ign);
    authModal.setAttribute('aria-hidden','true');
  }catch(err){ alert(err.message || 'Register failed'); }
});

loginBtn?.addEventListener('click', async ()=>{
  const email = $('auth-email').value.trim();
  const password = $('auth-password').value;
  if(!email || !password){ alert('Fill email & password'); return; }
  try{
    await auth.signInWithEmailAndPassword(email, password);
    alert('Login successful');
    authModal.setAttribute('aria-hidden','true');
  }catch(err){ alert(err.message || 'Login failed'); }
});

googleBtn?.addEventListener('click', async ()=>{
  try{
    const provider = new firebase.auth.GoogleAuthProvider();
    const res = await auth.signInWithPopup(provider);
    // ensure user doc exists
    const user = res.user;
    await createUserDoc(user.uid, user.displayName || '');
    alert('Logged in with Google');
    authModal.setAttribute('aria-hidden','true');
  }catch(err){ alert(err.message || 'Google login failed'); }
});

/* ---------- Auth state observer: update UI ---------- */
const authAreaEl = $('auth-area');
const profileAvatar = $('profile-avatar');
const profileName = $('profile-name');
const profileIgn = $('profile-ign');
const profileUid = $('profile-uid');
const profileCredits = $('profile-credits');

function renderAuthUI(user, profileData){
  if(user){
    // show avatar & dropdown
    authAreaEl.innerHTML = `
      <button id="profile-btn" class="btn blue-glow">
        <img src="${profileAvatar.src}" class="mini-avatar" alt="avatar" style="width:28px;height:28px;border-radius:8px;object-fit:cover;margin-right:8px"/>
        ${profileData?.ign || (user.displayName || 'Player')}
      </button>
    `;
    $('profile-btn')?.addEventListener('click', ()=> showProfilePanel(true));
    // update profile panel content
    profileAvatar.src = profileData?.avatar || 'assets/myskin.png';
    profileName.textContent = profileData?.displayName || (profileData?.ign || (user.displayName || 'Player'));
    profileIgn.textContent = 'IGN: ' + (profileData?.ign || '-');
    profileUid.textContent = 'UID: ' + user.uid;
    profileCredits.textContent = 'Credits: ' + (profileData?.credits ?? 0);
    profilePanel.classList.add('active');
  } else {
    // show login button
    authAreaEl.innerHTML = `<button id="open-auth" class="btn primary">Login / Register</button>`;
    document.getElementById('open-auth')?.addEventListener('click', ()=> authModal.setAttribute('aria-hidden','false'));
    profilePanel.classList.remove('active');
  }
}

/* Logout and credit demo button */
$('logout-btn')?.addEventListener && $('logout-btn').addEventListener('click', ()=> auth.signOut());

$('add-credit')?.addEventListener && $('add-credit').addEventListener('click', async ()=>{
  const user = auth.currentUser;
  if(!user){ alert('Not logged in'); return; }
  try{
    const ref = db.collection('users').doc(user.uid);
    await db.runTransaction(async tx=>{
      const doc = await tx.get(ref);
      const current = doc.exists ? (doc.data().credits || 0) : 0;
      tx.set(ref, { credits: current + 50 }, { merge:true });
    });
    alert('Added 50 demo credits');
  }catch(err){ console.error(err); alert('Failed to add credits') }
});

/* Listen to auth changes and fetch Firestore profile */
auth.onAuthStateChanged(async user => {
  if(!user){
    renderAuthUI(null, null);
    return;
  }
  const doc = await db.collection('users').doc(user.uid).get().catch(()=>null);
  const profile = (doc && doc.exists) ? doc.data() : { ign: user.displayName || '', credits:0, avatar:'assets/myskin.png' };
  // update profile area
  renderAuthUI(user, profile);
});

/* attach logout handler (delegated, since the button is re-rendered) */
document.body.addEventListener('click', (e)=>{
  if(e.target && e.target.id === 'logout-btn') auth.signOut();
});

/* ---------- Ranks data & rendering (flip, stable height) ---------- */
const RANKS = [
  {name:"ELITE", ability:"Extra Kit Slot, /nick, /hat", price3:"৫৯৳", priceP:"১৪৯৳"},
  {name:"HERO", ability:"Double Coins, /fly (lobby), /rename", price3:"১৪৯৳", priceP:"৩৪৯৳"},
  {name:"TITAN", ability:"Special Commands, /enderchest, kits+", price3:"২৪৯৳", priceP:"৫৯৯৳"},
  {name:"LEGEND", ability:"VIP Lobby, /anvil, /workbench, trails", price3:"৩৯৯৳", priceP:"৮৯৯৳"},
  {name:"PHANTOM", ability:"All Perks, priority queue, /disguise", price3:"৫৯৯৳", priceP:"১৯৯৯৳"}
];
const rankGridEl = document.getElementById('rank-grid');

function makeRankCard(item, priceText){
  const wrap = document.createElement('div');
  wrap.className = 'rank-card card';
  wrap.innerHTML = `
    <div class="rank-inner">
      <div class="rank-face rank-front">
        <div class="rank-title">${item.name}</div>
        <div class="rank-price">${priceText}</div>
        <div class="rank-ability">Hover to flip for perks</div>
      </div>
      <div class="rank-face rank-back">
        <div class="rank-title">${item.name}</div>
        <div class="rank-ability">${item.ability}</div>
        <div class="rank-actions">
          <button class="btn blue-glow buy-btn">Buy Now</button>
          <button class="btn outline addcart">Add to Cart</button>
        </div>
      </div>
    </div>
  `;
  // demo buy action
  wrap.querySelector('.buy-btn')?.addEventListener('click', ()=> alert(`Buy: ${item.name} — demo (implement payment)`));
  return wrap;
}

function renderRanks(duration='3month'){
  rankGridEl.innerHTML = '';
  RANKS.forEach(r=>{
    const price = (duration === 'permanent') ? r.priceP : r.price3;
    rankGridEl.appendChild(makeRankCard(r, price));
  });
}

document.querySelectorAll('.rank-toggle .btn').forEach(b=>{
  b.addEventListener('click', (e)=>{
    document.querySelectorAll('.rank-toggle .btn').forEach(x=>x.classList.remove('active'));
    b.classList.add('active');
    renderRanks(b.dataset.duration);
  });
});
renderRanks('3month');

/* ---------- Leaderboard ---------- */
const LB_DATA = {
  overall:[
    {pos:1,name:"PlayerOne",points:15230},
    {pos:2,name:"PlayerTwo",points:14110},
    {pos:3,name:"PlayerThree",points:13380},
    {pos:4,name:"PlayerFour",points:12050},
    {pos:5,name:"PlayerFive",points:11040}
  ],
  weekly:[
    {pos:1,name:"PlayerThree",points:1980},
    {pos:2,name:"PlayerTwo",points:1760},
    {pos:3,name:"PlayerOne",points:1650},
    {pos:4,name:"PlayerSix",points:1205},
    {pos:5,name:"PlayerSeven",points:1110}
  ],
  monthly:[
    {pos:1,name:"PlayerFour",points:5230},
    {pos:2,name:"PlayerFive",points:4980},
    {pos:3,name:"PlayerOne",points:4740},
    {pos:4,name:"PlayerThree",points:4400},
    {pos:5,name:"PlayerTwo",points:4200}
  ]
};

const leaderboardEl = document.getElementById('leaderboard');
function renderLeaderboard(mode='overall'){
  const data = LB_DATA[mode] || [];
  leaderboardEl.innerHTML = `
    <table class="table">
      <thead><tr><th>#</th><th>Player</th><th>Points</th></tr></thead>
      <tbody>${data.map(r=>`<tr><td class="pos">#${r.pos}</td><td>${r.name}</td><td>${r.points}</td></tr>`).join('')}</tbody>
    </table>
  `;
}
renderLeaderboard('overall');
document.querySelectorAll('.ranking-header .btn-chip').forEach(btn=>{
  btn.addEventListener('click', ()=>{
    document.querySelectorAll('.ranking-header .btn-chip').forEach(x=>x.classList.remove('active'));
    btn.classList.add('active');
    renderLeaderboard(btn.dataset.mode);
  });
});

/* ---------- Staff rendering (keeps your data intact) ---------- */
const STAFF = [
  {name:"Tanber", role:"FOUNDER", ign:"notcooldamn2", discord:"tanber_369", photo:"skins/tanber.png"},
  {name:"Sohrab", role:"CO FOUNDER", ign:"notcooldamn3", discord:"sohrab_369", photo:"skins/sohrab.png"},
  {name:"Ahsan", role:"Partner", ign:"ryuzen", discord:"monkey._.d._.luffy2", photo:"skins/ahsan.png"},
  {name:"Arfat", role:"Manager", ign:"onxy", discord:"onyx.plays", photo:"skins/arfat.png"},
  {name:"Asraful", role:"Moderator", ign:"asraful_vai", discord:"asraful_vai", photo:"skins/asraful.png"},
  {name:"Risat", role:"Senior Staff", ign:"risat", discord:"resath", photo:"skins/risat.png"},
  {name:"Rasel", role:"Social Manager", ign:"CANDYB0T", discord:"candyb0t", photo:"skins/rasel.png"},
  {name:"Siam", role:"Social Manager", ign:"siam", discord:"siam45795", photo:"skins/siam.png"},
  {name:"Tanver", role:"Developer", ign:"tenzenx", discord:"tenzenx", photo:"skins/tanver.png"}
];
async function renderStaff(){
  const grid = document.getElementById('admin-grid');
  grid.innerHTML = '';
  STAFF.forEach(s=>{
    const card = document.createElement('div');
    card.className = 'admin-card card';
    card.innerHTML = `
      <img class="admin-photo" src="${s.photo}" alt="${s.name}" onerror="this.src='skins/placeholder.png'"/>
      <div class="admin-name">${s.name}</div>
      <div class="admin-role">${s.role}</div>
      <div class="admin-meta">IGN: ${s.ign}</div>
      <div class="admin-meta">Discord: ${s.discord}</div>
    `;
    grid.appendChild(card);
  });
}
renderStaff();

/* ---------- Event countdown ---------- */
const eventTimer = document.getElementById('event-timer');
function tickCountdown(){
  const now = new Date();
  const target = new Date(now.getFullYear(), now.getMonth()+1, 1, 0, 0, 0);
  const diff = target - now;
  if(diff <= 0){ eventTimer.textContent = 'Event is live!'; return; }
  const d = Math.floor(diff / (1000*60*60*24));
  const h = Math.floor((diff / (1000*60*60)) % 24);
  const m = Math.floor((diff / (1000*60)) % 60);
  const s = Math.floor((diff / 1000) % 60);
  eventTimer.textContent = `Next Event in ${d}d ${h}h ${m}m ${s}s`;
}
tickCountdown();
setInterval(tickCountdown, 1000);

/* ---------- Accessibility & small UX helpers ---------- */
/* Prevent accidental nav anchor jump */
document.querySelectorAll('.nav-link').forEach(a=>a.addEventListener('click', e=>{ e.preventDefault(); const id = a.getAttribute('href').slice(1); document.getElementById(id)?.scrollIntoView({behavior:'smooth'}); }));

/* Close profile panel if click outside */
document.addEventListener('click', (e)=>{
  const btn = e.target.closest && e.target.closest('#profile-btn');
  if(btn) return;
  const inside = e.target.closest && (e.target.closest('.profile-card') || e.target.closest('#auth-modal'));
  if(!inside) showProfilePanel(false);
});

/* mini styling for new profile button images */
document.body.addEventListener('click', ()=>{ /* reserved for delegated events */ });

/* END of script.js */
